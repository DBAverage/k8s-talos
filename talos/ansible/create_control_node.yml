---
  - name: Create a VM from a template
    hosts: localhost
    gather_facts: no

    vars_files:
      - vmware_vars.yml
      - unifi_vars.yml
    
    vars:

      guest_base: kube
      datastore: esxi-2.2
      vm_folder: Datacenter/vm/Kubernetes

      cpu_cores: 4
      ram_mb: 8192
      disk_size_gb: 10
      
      cluster_name: k8s

    tasks:

    - name: install pre-requisites
      pip:
        name:
          - pyyaml
          - pyVmomi>=6.7

    - name: get list of guests
      community.vmware.vmware_vm_info:
        hostname: '{{ vcenter_hostname }}'
        username: '{{ vcenter_username }}'
        password: '{{ vcenter_password }}'
        folder: '{{ vm_folder }}'
        validate_certs: false
      register: vm_info

    - name: write output to yaml
      copy:
        content: "{{ vm_info.virtual_machines | to_yaml }}"
        dest: /tmp/talos_guests.yaml

    - name: get guest name
      script: 
        cmd: get_next_guest.py "{{ guest_base }}"
        executable: python3
      register: get_next_guest_output

    - name: set guest name
      set_fact:
        guest_name: "{{ get_next_guest_output.stdout | trim }}"

    - name: set ip address last octet
      set_fact:
        last_octet: "{{ 100 + guest_name[-1] | int }}"

    - name: set ip address
      set_fact:
        ip_address: "{{ '192.168.6.' + last_octet }}"

    - name: deploy Virtual Machine from OVF template in content library
      community.vmware.vmware_content_deploy_ovf_template:
        hostname: '{{ vcenter_hostname }}'
        username: '{{ vcenter_username }}'
        password: '{{ vcenter_password }}'
        template: talos
        cluster: Cluster
        datastore: "{{ datastore }}"
        storage_provisioning: thin
        folder: Kubernetes
        datacenter: Datacenter
        name: "{{ guest_name }}" 
        validate_certs: false  
        log_level: normal       # default, info, debug
      register: deploy_vm

    - name: get guest info
      community.vmware.vmware_guest_info:
        hostname: '{{ vcenter_hostname }}'
        username: '{{ vcenter_username }}'
        password: '{{ vcenter_password }}'      
        name: "{{ guest_name }}"
        datacenter: Datacenter
        validate_certs: false
      register: guest_info

    - name: set mac_address
      set_fact:
        mac_address: "{{ guest_info.instance.hw_eth0.macaddress | trim }}"

    - name: put guest on VLAN 60
      community.vmware.vmware_guest_network:
        hostname: "{{ vcenter_hostname }}"
        username: "{{ vcenter_username }}"
        password: "{{ vcenter_password }}"
        datacenter: Datacenter
        name: "{{ guest_name }}"
        network_name: VLAN 60 (CONTAINER)
        mac_address: "{{ mac_address }}"
        validate_certs: false
      register: update_network      

    - name: update guest resources
      community.vmware.vmware_guest:
        hostname: "{{ vcenter_hostname }}"
        username: "{{ vcenter_username }}"
        password: "{{ vcenter_password }}"
        name: "{{ guest_name }}"
        hardware:
          num_cpus: "{{ cpu_cores }}"
          num_cpu_cores_per_socket: 1   
          memory_mb: "{{ ram_mb }}"
        validate_certs: false
      register: guest_resources

    - name: update os disk
      community.vmware.vmware_guest_disk:
        hostname: "{{ vcenter_hostname }}"
        username: "{{ vcenter_username }}"
        password: "{{ vcenter_password }}"
        name: "{{ guest_name }}"
        datacenter: Datacenter
        folder: Kubernetes
        disk:
          - size_gb: "{{ disk_size_gb }}"
            datastore: "{{ datastore }}"
            scsi_controller: 0
            unit_number: 0
            state: present
        validate_certs: false
      register: os_disk  

    - name: Add disks
      community.vmware.vmware_guest_disk:
        hostname: "{{ vcenter_hostname }}"
        username: "{{ vcenter_username }}"
        password: "{{ vcenter_password }}"
        name: "{{ guest_name }}"
        datacenter: Datacenter
        disk: #name, uuid, moid
          - size_gb: 100
            datastore: "{{ datastore }}"
            unit_number: 1
            state: present
            type: thin
            scsi_controller: 0
        validate_certs: false
      register: new_os_disk

    - name: start guest
      community.vmware.vmware_guest_powerstate:
        hostname: "{{ vcenter_hostname }}"
        username: "{{ vcenter_username }}"
        password: "{{ vcenter_password }}"
        name: "{{ guest_name }}"
        state: powered-on
        validate_certs: false
      register: start_guest

    - name: wait 30 seconds for guest to start
      wait_for:
        timeout: 30

    - name: get ip address 
      script: 
        cmd: get_ip_address.py "{{ mac_address }}" "{{ unifi_username }}" "{{ unifi_password }}"
        executable: python3
      register: get_ip_address_output
      until: "{{ get_ip_address_output.rc == 0 }}"
      retries: 20
      delay: 10

    - name: set temp_ip_address
      set_fact:
        temp_ip_address: "{{ get_ip_address_output.stdout | trim }}"

    - name: apply talos config
      command: talosctl apply-config --insecure --nodes "{{ temp_ip_address }}"  --file "./files/controlplane_{{ guest_name }}.yaml"

    - name: wait 30 seconds for config to apply
      wait_for:
        timeout: 30

    - name: apply talos hostname
      shell: >
        talosctl patch --mode=no-reboot machineconfig --nodes "{{ temp_ip_address }}" --patch '{"op": "add", "path": "/machine/network", "value": {"hostname": "{{ guest_name }}"}}'

    - name: debug guest_name
      debug:
        msg: "Created control node {{ guest_name }}"